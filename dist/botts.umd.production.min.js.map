{"version":3,"file":"botts.umd.production.min.js","sources":["../src/structures/Logger.ts","../src/structures/BotClass.ts","../src/structures/Command.ts","../src/structures/Event.ts"],"sourcesContent":["import pkg from 'chalk';\r\nconst { red, yellow, blue, magenta, green } = pkg;\r\n\r\nexport enum LogLevel {\r\n\tError = 0,\r\n\tWarning,\r\n\tInfo,\r\n\tDebug,\r\n\tVerbose,\r\n}\r\n\r\ntype LevelStrings = keyof typeof LogLevel;\r\n\r\nexport class Logger {\r\n\tconstructor(level: LogLevel = LogLevel.Info) {\r\n\t\tthis.level = level;\r\n\t}\r\n\r\n\tpublic level: LogLevel;\r\n\tprivate colors = [red, yellow, blue, magenta, green];\r\n\r\n\temit(message: any, level: LevelStrings | LogLevel = LogLevel.Info) {\r\n\t\tif (typeof level == 'string') level = LogLevel[level];\r\n\t\tif (level > this.level) return;\r\n\t\tconsole.log(this.colors[level](`[${LogLevel[level]}]`), message.toString());\r\n\t}\r\n}\r\n","import * as fs from 'fs';\r\nimport path from 'path';\r\nimport {\r\n\tClient,\r\n\tClientOptions,\r\n\tClientUser,\r\n\tCollection,\r\n\tMessage,\r\n\tPartialMessage,\r\n\tSnowflake,\r\n} from 'discord.js';\r\nimport { Command } from './Command';\r\nimport { Logger, LogLevel } from './Logger';\r\nimport { Event } from './Event';\r\n\r\ninterface _BotOptions extends ClientOptions {\r\n\tcommandFolder: string;\r\n\teventFolder: string;\r\n\tlogLevel?: LogLevel;\r\n}\r\n\r\nexport class BotClass extends Client {\r\n\tconstructor(prefix: string, token: string, owners: Snowflake[], options: _BotOptions) {\r\n\t\tsuper(options);\r\n\t\tthis.logger = new Logger(options.logLevel);\r\n\t\tthis.prefix = prefix;\r\n\t\tthis.token = token;\r\n\t\tthis.owners = owners;\r\n\t\tthis.commandFolder = path.resolve(options.commandFolder);\r\n\t\tthis.eventFolder = path.resolve(options.eventFolder);\r\n\t\tthis.init();\r\n\t}\r\n\r\n\tprefix: string;\r\n\ttoken: string;\r\n\tlogger: Logger;\r\n\tuser!: ClientUser;\r\n\tprivate owners: Snowflake[];\r\n\tprivate commands: Collection<string, Command> = new Collection();\r\n\tprivate events: Collection<string, Event> = new Collection();\r\n\tprotected readonly commandFolder: string;\r\n\tprotected readonly eventFolder: string;\r\n\r\n\tasync init() {\r\n\t\ttry {\r\n\t\t\tawait this.registerCommands();\r\n\t\t\tawait this.eventDispatcher();\r\n\t\t\tthis.on('message', message => this.commandDispatcher(message));\r\n\t\t\tthis.on('messageUpdate', message => this.commandDispatcher(message));\r\n\t\t\tawait this.login(this.token);\r\n\r\n\t\t\tsetInterval(() => {\r\n\t\t\t\tthis.logger.emit(`[ws] Heartbeat ping: ${this.ws.ping}`);\r\n\t\t\t}, 30000);\r\n\t\t} catch (error) {\r\n\t\t\tthrow this.logger.emit(\r\n\t\t\t\t`Uncaught error while attempting init sequence: \\n${error}`,\r\n\t\t\t\tLogLevel.Error\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tasync registerCommands() {\r\n\t\tconst commandFiles = fs.readdirSync(this.commandFolder).filter(file => file.endsWith('.js'));\r\n\t\tthis.logger.emit(`commandfiles = ${commandFiles}`, LogLevel.Verbose);\r\n\r\n\t\tfor (const file of commandFiles) {\r\n\t\t\tconst fullPath = path.resolve(path.join(this.commandFolder, file));\r\n\t\t\tthis.logger.emit(`fullPath = ${fullPath}`, LogLevel.Verbose);\r\n\t\t\tthis.logger.emit(`Attempting to register commands in ${fullPath}`, LogLevel.Debug);\r\n\t\t\tlet command!: Command;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tcommand = new (await import(fullPath)).default(this);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthis.logger.emit(`Error while registering commands: \\n${error}`, LogLevel.Error);\r\n\t\t\t}\r\n\r\n\t\t\tthis.logger.emit(`command = ${command.name}`, LogLevel.Verbose);\r\n\t\t\tthis.commands.set(command.name, command);\r\n\r\n\t\t\tcommand.aliases?.forEach((alias: string) => {\r\n\t\t\t\t/* Clone command without using slow Object.setPrototypeOf()\r\n\t\t\t\tThis isn't clean but registers aliases as first-class commands,\r\n\t\t\t\tsimplifying the command search in the dispatcher */\r\n\t\t\t\tconst newCmd = Object.assign(Object.create(Object.getPrototypeOf(command)), command);\r\n\t\t\t\tnewCmd.name = alias;\r\n\t\t\t\tthis.commands.set(alias, newCmd);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tasync eventDispatcher() {\r\n\t\tconst eventFiles = fs.readdirSync(this.eventFolder).filter(file => file.endsWith('.js'));\r\n\r\n\t\tfor (const file of eventFiles) {\r\n\t\t\tconst fullPath = path.resolve(path.join(this.eventFolder, file));\r\n\t\t\tconst event = new (await import(fullPath)).default(this);\r\n\t\t\tconst eName: string = event.name || file;\r\n\t\t\tconst once: boolean = event.once;\r\n\r\n\t\t\tthis[once ? 'once' : 'on'](eName, (...args) => {\r\n\t\t\t\tevent.run(...args);\r\n\t\t\t\tthis.logger.emit(`dispatched event with name ${eName}`, LogLevel.Debug);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tasync commandDispatcher(message: Message | PartialMessage) {\r\n\t\tif (\r\n\t\t\tmessage.partial ||\r\n\t\t\t!message.content.startsWith(this.prefix) ||\r\n\t\t\tmessage.content.length < this.prefix.length ||\r\n\t\t\tmessage.author.bot\r\n\t\t)\r\n\t\t\treturn;\r\n\r\n\t\tconst args = message.content.slice(this.prefix.length).split(' ');\r\n\t\tconst command = args.shift()?.toLowerCase() as string;\r\n\t\tif (!this.commands.has(command)) return;\r\n\r\n\t\tif (command === 'reload') {\r\n\t\t\tawait this.registerCommands();\r\n\t\t\tmessage.reply('reloaded');\r\n\t\t} else if (command === 'unload') {\r\n\t\t\tconst hasCmd = this.commands.has(args[0]);\r\n\t\t\tthis.logger.emit(`hasCmd ${hasCmd}`, LogLevel.Verbose);\r\n\t\t\tif (!hasCmd) return;\r\n\t\t\tthis.commands.delete(args[0]);\r\n\t\t\tthis.logger.emit(Array.from(this.commands.keys()).toString(), LogLevel.Verbose);\r\n\t\t\tmessage.reply('unloaded');\r\n\t\t} else if (command === 'reinit') {\r\n\t\t\tawait this.init();\r\n\t\t\tmessage.reply('reinit');\r\n\t\t}\r\n\r\n\t\tthis.logger.emit(\r\n\t\t\t`commandKeys = ${Array.from(this.commands.keys())\r\n\t\t\t\t.join(', ')\r\n\t\t\t\t.toString()}`,\r\n\t\t\tLogLevel.Verbose\r\n\t\t);\r\n\r\n\t\t// Simpler search mentioned in registerCommands()\r\n\t\tconst cmd = this.commands.find(cmd => cmd.name === command);\r\n\t\tif (!cmd)\r\n\t\t\tthrow this.logger.emit(`Could not find command with name ${command}`, LogLevel.Warning);\r\n\r\n\t\tif (cmd.ownerOnly && !this.owners.includes(message.author.id)) return;\r\n\t\tcmd.run(message, args);\r\n\t\tthis.logger.emit(`dispatched command with name ${cmd.name}`, LogLevel.Debug);\r\n\t}\r\n}\r\n","import { Message } from 'discord.js';\r\nimport { BotClass } from './BotClass';\r\n\r\nexport abstract class Command {\r\n\tconstructor(client: BotClass) {\r\n\t\tthis.client = client;\r\n\t}\r\n\r\n\tclient!: BotClass;\r\n\tabstract name: string;\r\n\taliases?: string[];\r\n\townerOnly?: boolean = false;\r\n\tabstract description: string;\r\n\tabstract run(message: Message, args: string[]): Promise<Message | void> | void;\r\n\tprotected shouldHandle = true;\r\n}\r\n","import { BotClass } from './BotClass';\n\nexport abstract class Event {\n\tconstructor(client: BotClass) {\n\t\tthis.client = client;\n\t}\n\n\tclient: BotClass;\n\tonce: boolean = false;\n\tabstract name: string;\n\tabstract run(...args: any[]): void;\n}\n"],"names":["red","yellow","blue","magenta","green","pkg","LogLevel","Logger","constructor","level","Info","emit","message","this","console","log","colors","toString","Client","prefix","token","owners","options","Collection","logger","logLevel","commandFolder","path","resolve","eventFolder","init","registerCommands","eventDispatcher","on","commandDispatcher","login","setInterval","ws","ping","error","Error","commandFiles","fs","filter","file","endsWith","Verbose","fullPath","join","command","Debug","import","default","name","commands","set","aliases","forEach","alias","newCmd","Object","assign","create","getPrototypeOf","eventFiles","event","eName","once","args","run","partial","content","startsWith","length","author","bot","slice","split","shift","_args$shift","toLowerCase","has","reply","hasCmd","delete","Array","from","keys","cmd","find","Warning","ownerOnly","includes","id","client"],"mappings":"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"}